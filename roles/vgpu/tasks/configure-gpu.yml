---
- name: Show VGPU definition
  ansible.builtin.debug:
    var: vgpu_definition

- name: Enable persistence mode
  # This can persist mig mode across a reboot
  ansible.builtin.command: nvidia-smi -i {{ vgpu_definition.pci_address }} -pm ENABLED
  changed_when: false
  become: true
  when: vgpu_definition.mig_devices is defined

- name: Enable mig mode
  ansible.builtin.command: nvidia-smi -i {{ vgpu_definition.pci_address }} -mig 1
  changed_when: false
  become: true
  when: vgpu_definition.mig_devices is defined

- name: Template nvidia-sriov service
  ansible.builtin.template:
    src: nvidia-sriov.service.j2
    dest: /etc/systemd/system/nvidia-sriov-{{ vgpu_definition.pci_address }}.service
    owner: root
    group: root
    mode: "600"
  become: true
  when: vgpu_definition.virtual_functions is defined

- name: Ensure nvidia-sriov.service is started
  # Script behind service no-ops if already enabled
  ansible.builtin.systemd:
    name: nvidia-sriov-{{ vgpu_definition.pci_address }}.service
    enabled: true
    daemon_reload: true
    state: restarted
  changed_when: false
  become: true
  when: vgpu_definition.virtual_functions is defined

- name: Ensure nvidia-mig-manager is started
  # NOTE: The script beind this service no-ops if there are no changes.
  # We need to do this to ensure the mig slices are configured after
  # enabling sriov.
  ansible.builtin.systemd:
    name: nvidia-mig-manager.service
    state: restarted
  changed_when: false
  become: true
  when: vgpu_mig_enabled | bool

- name: Include virtual-function.yml
  ansible.builtin.include_tasks:
    file: virtual-function.yml
  loop: "{{ vgpu_definition.virtual_functions | default([]) }}"
  loop_control:
    loop_var: virtual_function
